@model Xperience.Core.Events.EventCalendarWidgetViewModel
@{
    await Html.RenderPartialAsync("_css.cshtml");
}
<!--<link rel="stylesheet" href="/tui-calendar.min.css" />-->
<style>
    #calendar-header {
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-around;
    }

    .render-range {
        font-weight: bold;
    }

    .header-spacer {
        flex-grow: 2;
    }

    .calendar-modes > button {
        border: none;
        background: none;
        outline: none;
        text-decoration: underline;
    }

    .calendar-navigation > button {
        border: none;
        background: none;
        outline: none;
        text-align: center;
        display: inline-block;
        border-radius: 50%;
        height: 20px;
        width: 20px;
    }
</style>
@{
    await Html.RenderPartialAsync("_js.cshtml");
}
<!--<script type="text/javascript" src="/tui-code-snippet.min.js"></script>
<script type="text/javascript" src="/tui-calendar.min.js"></script>-->
<script type="text/javascript">
(function (window, Calendar) {
    if (!window.eventCalendars) {
        window.eventCalendars = [];
    }

    const addCalendars = (list) => {
        const calendars = @Html.Raw(Json.Serialize(Model.Calendars));
        list.push(...calendars);
    }

    const findCalendar = (guid) => {
        const firstMatch = window.eventCalendars.filter(arr =>  arr[0] === guid)[0];
        return firstMatch[1];
    }

    const addSchedules = (cal) => {
        const json = @Html.Raw(Json.Serialize(Model.Events));
        json.forEach(s => {
            // Make custom (non-schedule) data available in raw
            s.raw = {
                showAttendeeCount: s.showAttendeeCount,
                showAttendeeNames: s.showAttendeeNames,
                attendeeNames: s.attendeeNames,
                capacity: s.capacity,
                summary: s.summary,
                attendeeCount: s.attendeeCount,
                url: s.url
            };
        });
        cal.createSchedules(json);
    }

    const getTimeTemplate = (schedule) => {
        let html = [];
        if (!schedule.isAllDay) {
            const time = schedule.start.toDate().toLocaleTimeString(undefined, { timeStyle: 'short' });
            html.push(time);
        }
        html.push(' ' + schedule.title);
        return html.join('');
    }

    const popupDetailBody = (schedule) => {
        let html = [];

        if (schedule.raw.summary) {
            html.push('<b>');
            html.push(schedule.raw.summary);
            html.push('</b>');
        }

        if (schedule.raw.showAttendeeCount && schedule.raw.capacity > 0) {
            html.push('<br/><span><i class="tui-full-calendar-icon tui-full-calendar-ic-user-b"></i></span>');
            html.push(schedule.raw.attendeeCount);
            html.push(' of ');
            html.push(schedule.raw.capacity);
        }
        if (schedule.raw.showAttendeeNames && schedule.raw.attendeeNames !== '') {
            html.push('<br/>Attendees: ');
            html.push(schedule.raw.attendeeNames);
        }

        html.push('<br/><a href="');
        html.push(schedule.raw.url);
        html.push('">View details &gt;</a>');

        return html.join('');
    }

    function initCalendar() {
        // Options: https://nhn.github.io/tui.calendar/latest/Options
        const calendarList = [];
        const cal = new Calendar('#calendar-@Model.WidgetGUID', {
            defaultView: 'month',
            template: {
                time: getTimeTemplate,
                popupDetailBody: popupDetailBody
            },
            isReadOnly: true,
            calendars: calendarList,
            useDetailPopup: true
        });

        // Push calendar to array in window with WidgetGUID as key
        window.eventCalendars.push(['@Model.WidgetGUID', cal]);

        addCalendars(calendarList);
        addSchedules(cal);
        updateHeader();
        setEventListeners();

        // Raise init event
        const event = new CustomEvent('calendar-init', { detail: { calendar: cal } });
        document.dispatchEvent(event);
    }

    const updateHeader = () => {
        const cal = findCalendar('@Model.WidgetGUID');
        const options = { year: 'numeric', month: 'long' };
        const header = cal.getDate().toDate().toLocaleString(undefined, options);
        document.getElementById('render-range-@Model.WidgetGUID').innerHTML = header;
    }

    const onClickNavi = (e) => {
        const action = getDataAction(e.target);
        const cal = findCalendar('@Model.WidgetGUID');

        switch (action) {
            case 'move-prev':
                cal.prev();
                break;
            case 'move-next':
                cal.next();
                break;
            case 'move-today':
                cal.today();
                break;
            case 'view-day':
                cal.changeView('day');
                break;
            case 'view-week':
                cal.changeView('week');
                break;
            case 'view-month':
                cal.changeView('month');
                break;
            default:
                return;
        }

        updateHeader();
    }

    const getDataAction = (target) => {
        return target.dataset ? target.dataset.action : target.getAttribute('data-action');
    }

    const setEventListeners = () => {
        document.getElementById('calendar-navigation-@Model.WidgetGUID').addEventListener('click', onClickNavi, false);
        document.getElementById('mode-navigation-@Model.WidgetGUID').addEventListener('click', onClickNavi, false);
    }

    if (document.readyState === 'loading') {
        document.addEventListener("DOMContentLoaded", function () {
            initCalendar();
        });
    } else {
        initCalendar();
    }
}) (window, tui.Calendar);
</script>

<div id="calendar-header">
    <span id="calendar-navigation-@Model.WidgetGUID" class="calendar-navigation">
        <button type="button" data-action="move-prev">
            <i class="tui-full-calendar-icon tui-full-calendar-ic-arrow-left" data-action="move-prev"></i>
        </button>
        <span id="render-range-@Model.WidgetGUID" class="render-range"></span>
        <button type="button" data-action="move-next">
            <i class="tui-full-calendar-icon tui-full-calendar-ic-arrow-right" data-action="move-next"></i>
        </button>
    </span>
    <span class="header-spacer"></span>
    <span id="mode-navigation-@Model.WidgetGUID" class="calendar-modes">
        <button data-action="view-month">Month</button>
        <button data-action="view-week">Week</button>
        <button data-action="view-day">Day</button>
    </span>
</div>
<div id="calendar-@Model.WidgetGUID"></div>