//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at https://docs.xperience.io/.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine;
using CMS.DocumentEngine.Types.Xperience;

[assembly: RegisterDocumentType(Event.CLASS_NAME, typeof(Event))]

namespace CMS.DocumentEngine.Types.Xperience
{
	/// <summary>
	/// Represents a content item of type Event.
	/// </summary>
	public partial class Event : TreeNode
	{
		#region "Constants and variables"

		/// <summary>
		/// The name of the data class.
		/// </summary>
		public const string CLASS_NAME = "Xperience.Event";


		/// <summary>
		/// The instance of the class that provides extended API for working with Event fields.
		/// </summary>
		private readonly EventFields mFields;

		#endregion


		#region "Properties"

		/// <summary>
		/// EventID.
		/// </summary>
		[DatabaseIDField]
		public int EventID
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("EventID"), 0);
			}
			set
			{
				SetValue("EventID", value);
			}
		}


		/// <summary>
		/// Name.
		/// </summary>
		[DatabaseField]
		public string EventName
		{
			get
			{
				return ValidationHelper.GetString(GetValue("EventName"), @"");
			}
			set
			{
				SetValue("EventName", value);
			}
		}


		/// <summary>
		/// Short summary.
		/// </summary>
		[DatabaseField]
		public string EventSummary
		{
			get
			{
				return ValidationHelper.GetString(GetValue("EventSummary"), @"");
			}
			set
			{
				SetValue("EventSummary", value);
			}
		}


		/// <summary>
		/// Long description.
		/// </summary>
		[DatabaseField]
		public string EventDescription
		{
			get
			{
				return ValidationHelper.GetString(GetValue("EventDescription"), @"");
			}
			set
			{
				SetValue("EventDescription", value);
			}
		}


		/// <summary>
		/// Location.
		/// </summary>
		[DatabaseField]
		public string EventLocation
		{
			get
			{
				return ValidationHelper.GetString(GetValue("EventLocation"), @"");
			}
			set
			{
				SetValue("EventLocation", value);
			}
		}


		/// <summary>
		/// Start time.
		/// </summary>
		[DatabaseField]
		public DateTime EventStart
		{
			get
			{
				return ValidationHelper.GetDateTime(GetValue("EventStart"), DateTimeHelper.ZERO_TIME);
			}
			set
			{
				SetValue("EventStart", value);
			}
		}


		/// <summary>
		/// All day event.
		/// </summary>
		[DatabaseField]
		public bool EventIsAllDay
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("EventIsAllDay"), true);
			}
			set
			{
				SetValue("EventIsAllDay", value);
			}
		}


		/// <summary>
		/// End time.
		/// </summary>
		[DatabaseField]
		public DateTime EventEnd
		{
			get
			{
				return ValidationHelper.GetDateTime(GetValue("EventEnd"), DateTimeHelper.ZERO_TIME);
			}
			set
			{
				SetValue("EventEnd", value);
			}
		}


		/// <summary>
		/// Requires registration.
		/// </summary>
		[DatabaseField]
		public bool EventRequiresRegistration
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("EventRequiresRegistration"), false);
			}
			set
			{
				SetValue("EventRequiresRegistration", value);
			}
		}


		/// <summary>
		/// Allow registration beyond capacity.
		/// </summary>
		[DatabaseField]
		public bool EventAllowOverCapacity
		{
			get
			{
				return ValidationHelper.GetBoolean(GetValue("EventAllowOverCapacity"), false);
			}
			set
			{
				SetValue("EventAllowOverCapacity", value);
			}
		}


		/// <summary>
		/// Capacity.
		/// </summary>
		[DatabaseField]
		public int EventCapacity
		{
			get
			{
				return ValidationHelper.GetInteger(GetValue("EventCapacity"), 0);
			}
			set
			{
				SetValue("EventCapacity", value);
			}
		}


		/// <summary>
		/// Gets an object that provides extended API for working with Event fields.
		/// </summary>
		[RegisterProperty]
		public EventFields Fields
		{
			get
			{
				return mFields;
			}
		}


		/// <summary>
		/// Provides extended API for working with Event fields.
		/// </summary>
		[RegisterAllProperties]
		public partial class EventFields : AbstractHierarchicalObject<EventFields>
		{
			/// <summary>
			/// The content item of type Event that is a target of the extended API.
			/// </summary>
			private readonly Event mInstance;


			/// <summary>
			/// Initializes a new instance of the <see cref="EventFields" /> class with the specified content item of type Event.
			/// </summary>
			/// <param name="instance">The content item of type Event that is a target of the extended API.</param>
			public EventFields(Event instance)
			{
				mInstance = instance;
			}


			/// <summary>
			/// EventID.
			/// </summary>
			public int ID
			{
				get
				{
					return mInstance.EventID;
				}
				set
				{
					mInstance.EventID = value;
				}
			}


			/// <summary>
			/// Name.
			/// </summary>
			public string Name
			{
				get
				{
					return mInstance.EventName;
				}
				set
				{
					mInstance.EventName = value;
				}
			}


			/// <summary>
			/// Short summary.
			/// </summary>
			public string Summary
			{
				get
				{
					return mInstance.EventSummary;
				}
				set
				{
					mInstance.EventSummary = value;
				}
			}


			/// <summary>
			/// Long description.
			/// </summary>
			public string Description
			{
				get
				{
					return mInstance.EventDescription;
				}
				set
				{
					mInstance.EventDescription = value;
				}
			}


			/// <summary>
			/// Location.
			/// </summary>
			public string Location
			{
				get
				{
					return mInstance.EventLocation;
				}
				set
				{
					mInstance.EventLocation = value;
				}
			}


			/// <summary>
			/// Start time.
			/// </summary>
			public DateTime Start
			{
				get
				{
					return mInstance.EventStart;
				}
				set
				{
					mInstance.EventStart = value;
				}
			}


			/// <summary>
			/// All day event.
			/// </summary>
			public bool IsAllDay
			{
				get
				{
					return mInstance.EventIsAllDay;
				}
				set
				{
					mInstance.EventIsAllDay = value;
				}
			}


			/// <summary>
			/// End time.
			/// </summary>
			public DateTime End
			{
				get
				{
					return mInstance.EventEnd;
				}
				set
				{
					mInstance.EventEnd = value;
				}
			}


			/// <summary>
			/// Requires registration.
			/// </summary>
			public bool RequiresRegistration
			{
				get
				{
					return mInstance.EventRequiresRegistration;
				}
				set
				{
					mInstance.EventRequiresRegistration = value;
				}
			}


			/// <summary>
			/// Allow registration beyond capacity.
			/// </summary>
			public bool AllowOverCapacity
			{
				get
				{
					return mInstance.EventAllowOverCapacity;
				}
				set
				{
					mInstance.EventAllowOverCapacity = value;
				}
			}


			/// <summary>
			/// Capacity.
			/// </summary>
			public int Capacity
			{
				get
				{
					return mInstance.EventCapacity;
				}
				set
				{
					mInstance.EventCapacity = value;
				}
			}
		}

		#endregion


		#region "Constructors"

		/// <summary>
		/// Initializes a new instance of the <see cref="Event" /> class.
		/// </summary>
		public Event() : base(CLASS_NAME)
		{
			mFields = new EventFields(this);
		}

		#endregion
	}
}